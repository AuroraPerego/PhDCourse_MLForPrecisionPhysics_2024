# This config has been generated by the pocket_coffea CLI 0.9.6.
from pocket_coffea.utils.configurator import Configurator
from pocket_coffea.lib.cut_definition import Cut
from pocket_coffea.lib.cut_functions import get_nObj_min, get_HLTsel, eventFlags, get_nObj_eq
from pocket_coffea.parameters.cuts import passthrough
from pocket_coffea.parameters.histograms import *
from pocket_coffea.lib.columns_manager import ColOut

import workflow
from workflow import SSWWProcessor

# Register custom modules in cloudpickle to propagate them to dask workers
import cloudpickle
import custom_cut_functions
cloudpickle.register_pickle_by_value(workflow)
cloudpickle.register_pickle_by_value(custom_cut_functions)

from custom_cut_functions import *
import os
localdir = os.path.dirname(os.path.abspath(__file__))

# Loading default parameters
from pocket_coffea.parameters import defaults
default_parameters = defaults.get_default_parameters()
defaults.register_configuration_dir("config_dir", localdir+"/params")

parameters = defaults.merge_parameters_from_files(default_parameters,
                                                    f"{localdir}/params/object_preselection.yaml",
                                                   update=True)
cfg = Configurator(
    parameters = parameters,
    datasets = {
        "jsons": ['datasets/ssww_dataset.json'],
        "filter" : {
            "samples": ['SSWW'],
            "samples_exclude" : [],
            "year": ['2018']
        }
    },

    workflow = SSWWProcessor,
    workflow_options = {
        "dump_columns_as_arrays_per_chunk": "root://eosuser.cern.ch//eos/user/d/dvalsecc/EFT_PhD_Course/samples/ntuples/"},
    skim = [
        eventFlags,
        get_nObj_min(2, minpt=15., coll="Jet"),
        notau
    ], 

    preselections = [
        get_nObj_min(2, minpt=30., coll="JetGood"),
        get_nObj_min(2, minpt=15., coll="LeptonGood"),
    ],
    
    categories = {
        "minimal": [
         get_nObj_min(1, minpt=25., coll="LeptonGood"),
         get_nObj_eq(2, minpt=15., coll="LeptonGood"),
         vbs_presel_looser,
        ],
    },

    weights = {
        "common": {
            "inclusive": ["genWeight","lumi","XS",
                          "pileup"],
            "bycategory": {
                          },
       },
        "bycategory" : {
                       },
        
        "bysample": {
        }
    },

    variations = {
        "weights": {
            "common": {
                "inclusive": [ ],
                "bycategory" : {
                }
            },
        "bysample": {
                    },
        "bycategory": {
                    }
        },
    },

    variables = {
        **count_hist(name="nJets", coll="JetGood",bins=8, start=2, stop=10),
        **count_hist(name="nLeptons", coll="LeptonGood",bins=4, start=1, stop=5),
        "vbs_jet_pt0" : HistConf([
            Axis(coll="VBSJets", field="pt", pos=0,
                 label=r"$p_{T}^{VBS-jet0}$ [GeV]", bins=70, start=20, stop=3000)], ),
        "vbs_jet_eta0" : HistConf([
            Axis(coll="VBSJets", field="eta",pos=0,
                 label= r"$\eta^{VBS-jet0}$", bins=50, start=-5, stop=5)], ),
        "vbs_jet_pt1" : HistConf([
            Axis(coll="VBSJets", field="pt",pos=1,
                 label=r"$p_{T}^{VBS-jet1}$ [GeV]", bins=70, start=20, stop=2000)], ),
        "vbs_jet_eta1" : HistConf([
            Axis(coll="VBSJets", field="eta", pos=1,
                 label=r"$\eta^{VBS-jet1}$",bins=50, start=-5, stop=5)], ),

        "leading_lepton_pt" : HistConf([
            Axis(coll="LeptonGood", field="pt", pos=0,
                 label=r"$p_{T}^{leading lepton}$ [GeV]",  bins=70, start=0, stop=1000)], ),
        "leading_lepton_eta" : HistConf([
            Axis(coll="LeptonGood", field="eta",pos=0,
                label= r"$\eta^{leading lepton}$", bins=50, start=-3,stop=3)], ),
        "subleading_lepton_pt" : HistConf([
            Axis(coll="LeptonGood", field="pt", pos=1,
                label= r"$p_{T}^{subleading lepton}$ [GeV]", bins=50, start=0, stop=400)], ),
        "subleading_lepton_eta" : HistConf([
            Axis(coll="LeptonGood", field="eta", pos=1,
                label= r"$\eta^{subleading lepton}$", bins=50, start=-3, stop=3)], ),
        
        
        "mjj_vbs": HistConf([
            Axis("mjj_vbs", r"$m_{jj}^{VBS}$ [GeV]", 60, 0, 5000)], ),
        "deltaeta_vbs": HistConf([
            Axis("deltaeta_vbs", r"$\Delta\eta_{jj}^{VBS}$", 60, 0, 10)], ),
        "mll": HistConf([
            Axis("mll", r"$m_{\ell\ell}$ [GeV]", 70, 0, 700)], ),
        "PuppiMET": HistConf([
            Axis(coll="PuppiMET", field="pt", label=r"$p_{T}^{miss}$ [GeV]", bins=80,start= 0, stop=1200)], ),
        "Zeppl1_vbs": HistConf([
            Axis("Zeppl1_vbs", r"$Zeppl1_{VBS}$", 60, 0, 3)], ),
        "Zeppl2_vbs": HistConf([
            Axis("Zeppl2_vbs", r"$Zeppl2_{VBS}$", 60, 0, 3)], ),
    },

    columns = {
        "common": {
            "inclusive": [
                ColOut("VBSJets",
                       ["pt", "eta", "phi", "mass"],
                       flatten=False
                       ),
                ColOut("nonVBSJets",
                       ["pt", "eta", "phi", "mass"],
                       flatten=False
                       ),
                ColOut("LeptonGood",
                       ["pt", "eta", "phi", "mass", "charge"],
                       flatten=False
                       ),
                ColOut("PuppiMET", ["phi","pt"], flatten=False),

                ColOut("W1", ["pt", "eta", "phi", "mass", "charge"]),
                ColOut("W2", ["pt", "eta", "phi", "mass", "charge"]),
                ColOut("VBSPartons", ["pt", "eta", "phi", "mass", "pdgId"], flatten=False),
                ColOut("Neutrino1", ["pt", "eta", "phi"]),
                ColOut("Neutrino2", ["pt", "eta", "phi"]),
                
                ColOut("Generator",["x1","x2","id1","id2","xpdf1","xpdf2"], flatten=False),
            ],
        }
    }
)
